#!/bin/bash

########### Constants ###########
if [[ -z $MANOR_INSTALL_LOCATION ]]; then
    MANOR_INSTALL_LOCATION=$(dirname $(readlink -f $0))
fi

source $MANOR_INSTALL_LOCATION/util.sh

############ Single module operations ##########

function download_module() {
    name=$1
    if [[ ! -d $(name_to_dir $name) ]]; then
        url=$(name_to_git_url $name)
        echo "_____ $name _____"
        git clone --recursive $url
    fi
}

function ensure_correct_branch() {
    name=$1
    branch=$(get_branch_from_name $name)
    if [[ -z $branch ]]; then
        branch="master"
    fi
    git checkout $branch
}

function print_module_info() {
    name=$1
    cd $(name_to_dir $name)
    echo "_____ $name _____"
    $MANOR_INSTALL_LOCATION/pkg.sh info
    $MANOR_INSTALL_LOCATION/pkg.sh show-links
    cd ..
}

function install_module() {
    name=$1
    cd $(name_to_dir $name)
    echo "_____ $name _____"
    ensure_correct_branch $name
    $MANOR_INSTALL_LOCATION/pkg.sh install
    cd ..
}

function uninstall_module() {
    name=$1
    cd $(name_to_dir $name)
    echo "_____ $name _____"
    $MANOR_INSTALL_LOCATION/pkg.sh uninstall
    cd ..
}

function update_module() {
    name=$1
    cd $(name_to_dir $name)
    echo "_____ $name _____"
    $MANOR_INSTALL_LOCATION/pkg.sh update
    cd ..
}

function run_git_cmd() {
    name=$1
    args=$@
    git_args="${args[@]:1}"
    cd $(name_to_dir $name)
    echo "_____ $name _____"
    git $git_args
    cd ..
}

function add_file_to_module() {
    name=$1
    file=$2
    real_path=$(realpath $file)
    dest_name=$(echo $(basename $file) | sed -r 's/^\.//g')
    cd $MODULES_DIR/$(name_to_dir $name)
    mv $real_path $dest_name
    link_src=$(realpath $dest_name)
    link_dest=$(echo $real_path | sed 's@'"$HOME"'@\$HOME@')
    echo "Add this to your config.sh for $name and run \"manor install\":"
    echo "[$dest_name]=$link_dest"
}

############ Multi module operations ##########

function install_modules() {
    if [[ $# -eq 0 ]]; then
        module_names=$(read_modules_list)
    else
        module_names=$@
    fi
    ensure_modules_dir_exists
    cd $MODULES_DIR
    for name in $module_names; do
        download_module $name
        install_module $name
    done
    cd ..
}


function update_modules() {
    ensure_modules_dir_exists
    if [[ $# -eq 0 ]]; then
        module_names=$(read_modules_list)
    else
        module_names=$@
    fi
    cd $MODULES_DIR
    for name in $module_names; do
        update_module $name
    done
    cd ..
}

function uninstall_modules() {
    if [[ ! -d $MODULES_DIR ]]; then
        echo "No modules present"
        exit 1
    fi
    if [[ $# -eq 0 ]]; then
        module_names=$(read_modules_list)
    else
        module_names=$@
    fi
    echo $MODULES_DIR
    cd $MODULES_DIR
    for name in $module_names; do
        uninstall_module $name
    done
    cd ..

}

function recursive_git() {
    if [[ ! -d $MODULES_DIR ]]; then
        echo "No modules present"
        exit 1
    fi
    module_names=$(read_modules_list)
    cd $MODULES_DIR
    for name in $module_names; do
        run_git_cmd $name "$@"
    done
    cd ..

}

function list_modules() {
    if [[ ! -d $MODULES_DIR ]]; then
        echo "No modules present"
        exit 1
    fi
    if [[ `ls $MODULES_DIR | wc -l` -eq 0 ]]; then
        echo "No $MODULES_DIR present"
    else
        printf "%s\n" $(read_modules_list)
    fi
}

function show_modules_info() {
    if [[ ! -d $MODULES_DIR ]]; then
        echo "No modules present"
        exit 1
    fi
    if [[ $# -eq 0 ]]; then
        module_names=$(read_modules_list)
    else
        module_names=$@
    fi
    cd $MODULES_DIR
    echo "Currently installed modules:"
    for module in $module_names; do
        print_module_info $module
    done
    cd ..
}


############ Main entry ############

args=("$@")
cmd_args="${args[@]:1}"

__usage="Usage: manor <subcommand>
where <subcommand> is one of:
    info
    isntall
    uninstall
    update
    list
    git "

if [[ $# -eq 0 ]]; then
    echo "$__usage"
    exit 1
else
    subcommand=$1
fi

case $subcommand in
    'info')
        show_modules_info ;;
    'install')
        install_modules $cmd_args;;
    'update')
        update_modules $cmd_args;;
    'uninstall')
        uninstall_modules $cmd_args ;;
    'git')
        recursive_git $cmd_args ;;
    'list')
        list_modules ;;
    'add')
        add_file_to_module $cmd_args ;;
    *)
        echo "Invalid command" ;;
esac

